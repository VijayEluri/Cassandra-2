#!/bin/bash  
#
# Startup script for Cassandra under *nix systems (it works under NT/cygwin too).
#
# Configuration files
#
# /etc/default/cassandra
#   If it exists, this is read at the start of script. It may perform any 
#   sequence of shell commands, like setting relevant environment variables.
#
# Configuration variables
#
# JAVA_HOME  
#   Home of Java installation. 
#
# JAVA
#   Command to invoke Java. If not set, $JAVA_HOME/bin/java will be
#   used.
#
# JAVA_OPTIONS
#   Extra options to pass to the JVM
#
# CASSANDRA_HOME
#   Where Cassandra is installed. If not set, the script will try go
#   guess it by first looking at the invocation path for the script,
#   and then by looking in standard locations as $HOME/opt/cassandra
#   and /opt/cassandra. 
#
# CASSANDRA_RUN
#   Where the cassandra.pid file should be stored. It defaults to the
#   first available of /var/run, /usr/var/run, and /tmp if not set.
#  
# CASSANDRA_PID
#   The Jetty PID file, defaults to $CASSANDRA_RUN/cassandra.pid
#   
# CASSANDRA_USER
#   if set, then used as a username to run the server as
#

usage()
{
    echo "Usage: $0 {start|stop|run|restart|check|supervise} "
    exit 1
}

[ $# -gt 0 ] || usage


##################################################
# Some utility functions
##################################################
findDirectory()
{
    OP=$1
    shift
    for L in $* ; do
        [ $OP $L ] || continue 
        echo $L
        break
    done 
}

running()
{
    [ -f $1 ] || return 1
    PID=$(cat $1)
    ps -p $PID >/dev/null 2>/dev/null || return 1
    return 0
}


##################################################
# Get the action
##################################################

ACTION=$1
shift
ARGS="$*"
NO_START=0
TMP=/tmp

##################################################
# See if there's a default configuration file
##################################################
if [ -f /etc/default/cassandra ] ; then 
  . /etc/default/cassandra
fi

##################################################
# Figure out cassandra home
#################################################
if [ -z "$CASSANDRA_HOME" ]
then
  CASSANDRA_HOME=/opt/cassandra
fi

if [ -z "$CASSANDRA_CONF" ]
then
  CASSANDRA_CONF=/var/cassandra
fi


#####################################################
# Find a location for the pid file
#####################################################
if [  -z "$CASSANDRA_RUN" ] 
then
  CASSANDRA_RUN=`findDirectory -w /var/run /usr/var/run /tmp`
fi

#####################################################
# Find a PID for the pid file
#####################################################
if [  -z "$CASSANDRA_PID" ] 
then
  CASSANDRA_PID="$CASSANDRA_RUN/cassandra.pid"
fi


##################################################
# Check for JAVA_HOME
##################################################
TMPJ=$TMP/j$$
if [ -z "$JAVA_HOME" ]
then
    # If a java runtime is not defined, search the following
    # directories for a JVM and sort by version. Use the highest
    # version number.

    # Java search path
    JAVA_LOCATIONS="\
        /usr/java \
        /usr/bin \
        /usr/local/bin \
        /usr/local/java \
        /usr/local/jdk \
        /usr/local/jre \
	/usr/lib/jvm \
        /opt/java \
        /opt/jdk \
        /opt/jre \
        /usr/lib/jvm/java-6-sun/bin \
    " 
    JAVA_NAMES="java jdk jre"
    for N in $JAVA_NAMES ; do
        for L in $JAVA_LOCATIONS ; do
            [ -d $L ] || continue 
            find $L -name "$N" ! -type d | grep -v threads | while read J ; do
                [ -x $J ] || continue
                VERSION=`eval $J -version 2>&1`       
                [ $? = 0 ] || continue
                VERSION=`expr "$VERSION" : '.*"\(1.[0-9\.]*\)["_]'`
                [ "$VERSION" = "" ] && continue
                expr $VERSION \< 1.6 >/dev/null && continue
                echo $VERSION:$J
            done
        done
    done | sort | tail -1 > $TMPJ
    JAVA=`cat $TMPJ | cut -d: -f2`
    JVERSION=`cat $TMPJ | cut -d: -f1`

    JAVA_HOME=`dirname $JAVA`
    while [ ! -z "$JAVA_HOME" -a "$JAVA_HOME" != "/" -a ! -f "$JAVA_HOME/lib/tools.jar" ] ; do
        JAVA_HOME=`dirname $JAVA_HOME`
    done
    [ "$JAVA_HOME" = "" ] && JAVA_HOME=

#    echo "Found JAVA=$JAVA in JAVA_HOME=$JAVA_HOME"
fi


##################################################
# Determine which JVM of version >1.6
# Try to use JAVA_HOME
##################################################
if [ "$JAVA" = "" -a "$JAVA_HOME" != "" ]
then
  if [ ! -z "$JAVACMD" ] 
  then
     JAVA="$JAVACMD" 
  else
    [ -x $JAVA_HOME/bin/jre -a ! -d $JAVA_HOME/bin/jre ] && JAVA=$JAVA_HOME/bin/jre
    [ -x $JAVA_HOME/bin/java -a ! -d $JAVA_HOME/bin/java ] && JAVA=$JAVA_HOME/bin/java
  fi
fi

if [ "$JAVA" = "" ]
then
    echo "Cannot find a JRE or JDK. Please set JAVA_HOME to a >=1.6 JRE" 2>&2
    exit 1
fi

JAVA_VERSION=`expr "$($JAVA -version 2>&1 | head -1)" : '.*1\.\([0-9]\)'`

#####################################################
# Are we running on Windows? Could be, with Cygwin/NT.
#####################################################
case "`uname`" in
CYGWIN*) PATH_SEPARATOR=";";;
*) PATH_SEPARATOR=":";;
esac


#####################################################
# Build the classpath
#####################################################
CASSANDRA_BIN=$CASSANDRA_HOME/build/classes
CLASSPATH=$CASSANDRA_CONF:$CASSANDRA_BIN
for jar in $CASSANDRA_HOME/lib/*.jar; do
    CLASSPATH=$CLASSPATH:$jar
done
JAVA_OPTIONS="$JAVA_OPTIONS -Dcassandra -Dstorage-config=$CASSANDRA_CONF"


#####################################################
# This is how Cassandra will be started
#####################################################
RUN_ARGS="-cp $CLASSPATH $JAVA_OPTIONS org.apache.cassandra.service.CassandraDaemon"
RUN_CMD="$JAVA $RUN_ARGS"

#####################################################
# Comment these out after you're happy with what 
# the script is doing.
#####################################################
#echo "CASSANDRA_HOME =  $CASSANDRA_HOME"
#echo "CASSANDRA_CONF =  $CASSANDRA_CONF"
#echo "CASSANDRA_RUN  =  $CASSANDRA_RUN"
#echo "CASSANDRA_PID  =  $CASSANDRA_PID"
#echo "JAVA_OPTIONS   =  $JAVA_OPTIONS"
#echo "JAVA           =  $JAVA"


##################################################
# Do the action
##################################################
case "$ACTION" in
  start)
        echo -n "Starting Cassandra: "

        if [ "$NO_START" = "1" ]; then 
	  echo "Not starting Cassandra - NO_START=1 in /etc/default/cassandra";
          exit 0;
	fi


	if which start-stop-daemon > /dev/null 2>&1 
	then
          [ x$CASSANDRA_USER = x ] && CASSANDRA_USER=$(whoami)
	  [ $UID = 0 ] && CH_USER="-c $CASSANDRA_USER"
	  if start-stop-daemon -S -p$CASSANDRA_PID $CH_USER -d $CASSANDRA_HOME -b -m -a $JAVA -- $RUN_ARGS 
	  then
	      sleep 1
	      if running $CASSANDRA_PID
	      then
                  echo OK
              else
                  echo FAILED
              fi
	  fi

	else

          if [ -f $CASSANDRA_PID ]
          then
            echo "Already Running!!"
            exit 1
          fi

          if [ x$CASSANDRA_USER != x ] 
          then
              touch $CASSANDRA_PID
              chown $CASSANDRA_USER $CASSANDRA_PID
              su - $CASSANDRA_USER -c "
                $RUN_CMD &
                PID=\$!
                disown \$PID
                echo \$PID > $CASSANDRA_PID"
          else
              $RUN_CMD &
              PID=$!
              disown $PID
              echo $PID > $CASSANDRA_PID
          fi

          echo "STARTED Jetty `date`" 
        fi

        ;;

  stop)
        echo -n "Stopping Cassandra: "
	if which start-stop-daemon > /dev/null 2>&1; then
	  start-stop-daemon -K -p $CASSANDRA_PID -d $CASSANDRA_HOME -a $JAVA -s HUP 
	  sleep 1
	  if running $CASSANDRA_PID
	  then
	      sleep 3
	      if running $CASSANDRA_PID
	      then
		  sleep 30
	          if running $CASSANDRA_PID
	          then
	             start-stop-daemon -K -p $CASSANDRA_PID -d $CASSANDRA_HOME -a $JAVA -s KILL
		  fi
              fi
	  fi

	  rm -f $CASSANDRA_PID
          echo OK
	else
	  PID=`cat $CASSANDRA_PID 2>/dev/null`
          TIMEOUT=30
          while running $CASSANDRA_PID && [ $TIMEOUT -gt 0 ]
          do
            kill $PID 2>/dev/null
            sleep 1
            let TIMEOUT=$TIMEOUT-1
          done
          
          [ $TIMEOUT -gt 0 ] || kill -9 $PID 2>/dev/null

	  rm -f $CASSANDRA_PID
          echo OK
	fi
        ;;

  restart)
        $0 stop $*
        sleep 5
        $0 start $*
        ;;

  supervise)
       #
       # Under control of daemontools supervise monitor which
       # handles restarts and shutdowns via the svc program.
       #
         exec $RUN_CMD
         ;;

  run|demo)
        echo "Running Cassandra: "

        if [ -f $CASSANDRA_PID ]
        then
            echo "Already Running!!"
            exit 1
        fi

        exec $RUN_CMD
        ;;

  check)
        echo "Checking arguments to Cassandra: "
        echo "CASSANDRA_HOME =  $CASSANDRA_HOME"
        echo "CASSANDRA_RUN  =  $CASSANDRA_RUN"
        echo "CASSANDRA_PID  =  $CASSANDRA_PID"
        echo "JAVA_OPTIONS   =  $JAVA_OPTIONS"
        echo "JAVA           =  $JAVA"
        echo "CLASSPATH      =  $CLASSPATH"
        echo "RUN_CMD        =  $RUN_CMD"
        echo
        
        if [ -f $CASSANDRA_RUN/cassandra.pid ]
        then
            echo "Cassandra running pid="`cat $CASSANDRA_RUN/cassandra.pid`
            exit 0
        fi
        if pgrep -f java.*CassandraDaemon; then
            exit 0
        fi
        exit 1
        ;;


*)
        usage
	;;
esac

exit 0

